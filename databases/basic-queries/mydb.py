
class MemoryScan(object):
    """
    Yield all records from the given "table" in memory.

    This is really just for testing... in the future our scan nodes
    will read from disk.
    """
    def __init__(self, table):
        self.table = table
        self.idx = 0

    def next(self):
        if self.idx >= len(self.table):
            return None

        x = self.table[self.idx]
        self.idx += 1
        return x


class Projection(object):
    """
    Map the child records using the given map function, e.g. to return a subset
    of the fields.
    """
    def __init__(self, proj, input):
        self.proj = proj
        self.child = input

    def next(self):
        tuple = self.child.next()
        if tuple == None:
            return None
        return self.proj(tuple)
        


class Selection(object):
    """
    Filter the child records using the given predicate function.

    Yes it's confusing to call this "selection" as it's unrelated to SELECT in
    SQL, and is more like the WHERE clause. We keep the naming to be consistent
    with the literature.
    """
    def __init__(self, predicate, input):
        self.predicate = predicate
        self.child = input

    def next(self):
        while True:
            tuple = self.child.next()
            if tuple == None:
                return None
            if self.predicate(tuple):
                return tuple


class Limit(object):
    """
    Return only as many as the limit, then stop
    """
    def __init__(self, n, input):
        self.limit = n
        self.returned = 0
        self.child = input

    def next(self):
        if self.limit == self.returned:
            return None

        self.returned += 1
        return self.child.next()


class Sort(object):
    """
    Sort based on the given key function
    """
    def __init__(self, key, input, desc=False):
        self.key = key
        self.desc = desc
        self.child = input
        self.data = None
        self.idx = 0

    def get_data(self):
        self.data = []
        while t := self.child.next():
            self.data.append(t)
        self.data.sort(key=self.key, reverse=self.desc)

    def next(self):
        if self.data == None:
            self.get_data()

        if self.idx > len(self.data):
            return None

        t = self.data[self.idx]
        self.idx += 1
        return t

class Sum(object):
    """
    Sum the given column of the table
    """
    def __init__(self, select_col):
        self.select_col = select_col
        self.sum = 0
        self.child = None
        self.finished = False

    def next(self):
        if self.finished:
            return None

        while t := self.child.next():
            self.sum += self.select_col(t)

        self.finished = True
        return (self.sum,)





def Q(*nodes):
    """
    Construct a linked list of executor nodes from the given arguments,
    starting with a root node, and adding references to each child
    """
    ns = iter(nodes)
    parent = root = next(ns)
    for n in ns:
        parent.child = n
        parent = n
    return root


def run(q):
    """
    Run the given query to completion by calling `next` on the (presumed) root
    """
    while True:
        x = q.next()
        if x is None:
            break
        yield x


if __name__ == '__main__':
    # Test data generated by Claude and probably not accurate!
    birds = (
        ('amerob', 'American Robin', 0.077, True),
        ('baleag', 'Bald Eagle', 4.74, True),
        ('eursta', 'European Starling', 0.082, True),
        ('barswa', 'Barn Swallow', 0.019, True),
        ('ostric1', 'Ostrich', 104.0, False),
        ('emppen1', 'Emperor Penguin', 23.0, False),
        ('rufhum', 'Rufous Hummingbird', 0.0034, True),
        ('comrav', 'Common Raven', 1.2, True),
        ('wanalb', 'Wandering Albatross', 8.5, False),
        ('norcar', 'Northern Cardinal', 0.045, True)
    )
    schema = (
        ('id', str),
        ('name', str),
        ('weight', float),
        ('in_us', bool),
    )

    # ids of non US birds
    t = tuple(run(Q(
        Projection(lambda x: (x[0],)),
        Selection(lambda x: not x[3]),
        MemoryScan(birds)
    ))) 
    print(t)
    assert t == (
        ('ostric1',),
        ('emppen1',),
        ('wanalb',),
    )
    
    # id and weight of 3 heaviest birds
    t = tuple(run(Q(
        Projection(lambda x: (x[0], x[2])),
        Limit(3),
        Sort(lambda x: x[2], desc=True),
        MemoryScan(birds),
    )))
    
    print(t)
    assert(t == (
        ('ostric1', 104.0),
        ('emppen1', 23.0),
        ('wanalb', 8.5),
    ))

    # sum of bird weights
    t = tuple(run(Q(
        Sum(lambda x: x[2]),
        MemoryScan(birds),
    )))
    
    print(t)
    assert(abs(t[0][0] - 141.6664) < .00001)
    # id and weight of 3 heaviest birds

    print('ok')
